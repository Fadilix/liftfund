generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@map("admins")
}

model User {
  id         Int      @id @default(autoincrement())
  firstName  String   @map("first_name")
  lastName   String   @map("last_name")
  email      String   @unique
  phone      String?
  password   String
  isVerified Boolean  @default(false) @map("is_verified")
  isApproved Boolean  @default(false) @map("is_approved")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  // Relations
  registrationMedia RegistrationMedia[]
  campaigns         Campaign[]

  @@map("users")
}

model RegistrationMedia {
  id     Int    @id @default(autoincrement())
  userId Int    @map("user_id")
  mediaId Int   @map("media_id")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@map("registration_media")
}

model Media {
  id        Int      @id @default(autoincrement())
  url       String
  type      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  registrationMedia RegistrationMedia[]
  campaignMedia     CampaignMedia[]

  @@map("media")
}

model CampaignCategory {
  id    Int    @id @default(autoincrement())
  label String

  // Relations
  campaigns Campaign[]

  @@map("campaign_categories")
}

model CampaignCarrier {
  id          Int    @id @default(autoincrement())
  carrierType String @map("carrier_type")

  // Relations
  campaigns Campaign[]

  @@map("campaign_carriers")
}

model TypeRegistrationMedia {
  id    Int    @id @default(autoincrement())
  label String

  @@map("type_registration_media")
}

model Campaign {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  targetAmount Float    @map("target_amount")
  startDate    DateTime @map("start_date")
  endDate      DateTime @map("end_date")
  status       String   @default("pending")
  isActive     Boolean  @default(false) @map("is_active")
  note         String?
  thanks       String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  // Foreign keys
  userId               Int @map("user_id")
  campaignCategoryId   Int @map("campaign_category_id")
  campaignCarrierId    Int @map("campaign_carrier_id")

  // Relations
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaignCategory CampaignCategory @relation(fields: [campaignCategoryId], references: [id])
  campaignCarrier  CampaignCarrier  @relation(fields: [campaignCarrierId], references: [id])
  campaignMedia    CampaignMedia[]
  donations        Donation[]

  @@map("campaigns")
}

model CampaignMedia {
  id         Int     @id @default(autoincrement())
  campaignId Int     @map("campaign_id")
  mediaId    Int     @map("media_id")
  title      String?
  sensitive  Boolean @default(false)

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  media    Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@map("campaign_media")
}

model Donation {
  id        Int      @id @default(autoincrement())
  alias     String
  review    String?
  anonymous Boolean  @default(false)
  campaignId Int     @map("campaign_id")

  // Relations
  campaign     Campaign      @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("donations")
}

model Transaction {
  id           Int      @id @default(autoincrement())
  apiReference String   @map("api_reference")
  operator     String
  type         String
  amount       Float
  date         DateTime
  sender       String
  receiver     String
  donationId   Int      @map("donation_id")

  // Relations
  donation Donation @relation(fields: [donationId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

// Table pour stocker les OTP temporaires
model OtpVerification {
  id        Int      @id @default(autoincrement())
  email     String
  otp       String
  expiresAt DateTime @map("expires_at")
  verified  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("otp_verifications")
}
